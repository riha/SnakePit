@{
    ViewBag.Title = "Index";
}
@section Script {
    <script type="text/javascript">
        var hub;

        $(function () {
            hub = $.connection.gameHub;
            console.log(hub);

            hub.crash = function () {
                console.log("Moved left and crashed");
            };

            hub.ok = function () {
                console.log("Moved ok");
            };

            $.connection.hub.start(function () {
                hub.join();
                init();
            });

        });

        function init() {
            var direction = Directions.Right;
            var lastDirection;

//            document.onkeydown = function (evt) {
//                evt = evt || window.event;
//                console.log(evt.keyCode);
//                hub.move(evt.keyCode);
//            };

            document.onkeydown = function (event) {
                if (event.keyCode == 37 && lastDirection != Directions.Right)
                    direction = Directions.Left;
                else if (event.keyCode == 38 && lastDirection != Directions.Down) {
                    direction = Directions.Up;
                }
                else if (event.keyCode == 39 && lastDirection != Directions.Left) {
                    direction = Directions.Right;
                }
                else if (event.keyCode == 40 && lastDirection != Directions.Up) {
                    direction = Directions.Down
                };
            };

            var snakeContext = $("#snake").get(0).getContext('2d');
            var gridContext = $("#grid").get(0).getContext('2d');

            var grid = new Grid(gridContext);

            var snake1 = new Snake(new Point(100, 40), snakeContext, grid);

            (function gameLoop() {
                lastRun = Date.now();

                //TODO: Start by calculating new position, then do all test - if everythings ok draw the new position
                if (snake1.draw(direction, lastRun)) {
                    lastDirection = direction;
                    //Här måste vi skicka hela arrayen med positioner till servern. Den skall då kontrollera eventuella kollisioner

//                    if (snake1.checkSelfCollision() || snake1.checkBorderCollision()) {
//                        gameOver();
//                    } else {
//                        if (snake1.checkFoodCollision(food)) {
//                            snake1.grow();
//                            //food.clear();
//                            food = new Food(foodContext, snake1);
//                        }

                        request = requestAnimFrame(gameLoop);
                    //}
                } else {
                    request = requestAnimFrame(gameLoop);
                }
            })();


        }
    </script>
}
<h2>
    Index</h2>
<canvas id="snake" width="500" height="500">
</canvas>
<canvas id="food" width="500" height="500">
</canvas>
<canvas id="grid" width="500" height="500">
</canvas>
